using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using DTO;
using CAD;
using System.Data;

namespace RETO2APP.VIEWS
{

    public partial class ModuloCatalogos : Window
    {
        int id = 0;
        public ModuloCatalogos()
        {
            InitializeComponent();
            txtFecha.Text = DateTime.Today.ToString();
        }
        //Crear nuevo catalogo
        private void registrarCatalogo(object sender, RoutedEventArgs e)
        {
            int filas = 0;
            byte estado;
            CADCatalogo con = new CADCatalogo();
            Catalogo cat = new Catalogo();
            if (String.IsNullOrEmpty(txtNombre.Text)
                || String.IsNullOrEmpty(txtEstado.Text))
            {
                MessageBox.Show("Por favor, llene todos los campos");
            }
            else
            {
                if (txtEstado.Text == "Activado")
                {
                    estado = 1;
                }
                else
                {
                    estado = 0;
                }
                cat.nombre = txtNombre.Text;
                cat.estado = estado;
                filas = con.registrarCatalogo(cat);
                switch (filas)
                {
                    case 1:
                        MessageBox.Show("Catalogo registrado");
                        break;
                    case -2:
                        MessageBox.Show("Ya hay un Catalogo con este nombre");
                        break;
                    default:
                        MessageBox.Show("Catalogo no registrado");
                        break;
                }
            }
        }
        //Buscar catalogo con nombre y fecha
        private void buscarCatalogo(object sender, RoutedEventArgs e)
        {
            ListarCatalogos.SelectedItem = null;
            if (String.IsNullOrEmpty(txtBusquedaNombre.Text)
                && String.IsNullOrEmpty(txtFecha.Text))
            {
                MessageBox.Show("Proporcione datos para buscar");
            }
            else
            {
                CADCatalogo con = new CADCatalogo();
                Catalogo cat = new Catalogo();
                DataTable dt = new DataTable();
                cat.nombre = txtNombre.Text;
                cat.fecha = Convert.ToDateTime(txtFecha.Text).ToString("yyyy/MM/dd");
                dt = con.BuscarCatalogo(cat);
                if (dt.Rows.Count > 0)
                {
                    ListarCatalogos.DataContext = dt.DefaultView;
                }
                else
                {
                    MessageBox.Show("Sin coincidencias");
                    ListarCatalogos.DataContext = dt.DefaultView;
                }
            }
        }
        //Generar columnas del Datagrid
        private void ListarCatalogos_AutoGeneratedColumns(object sender, EventArgs e)
        {
            if (ListarCatalogos.Columns.Count>0)
            {
                ListarCatalogos.Columns[0].Header = "ID";
                ListarCatalogos.Columns[1].Header = "Nombre";
                ListarCatalogos.Columns[2].Header = "Creado";
                ListarCatalogos.Columns[3].Header = "Estado";
            }
        }
        //Actualizar catalogo
        private void actualizarcatalogo(object sender, RoutedEventArgs e)
        {
            int filas = 0;
            byte estado;
            if (String.IsNullOrEmpty(txtNombre.Text)
                || String.IsNullOrEmpty(txtEstado.Text))
            {
                MessageBox.Show("No se permiten campos vacios");
            }
            else
            {
                CADCatalogo con = new CADCatalogo();
                Catalogo upd = new Catalogo();
                upd.Id = id;
                upd.nombre = txtNombre.Text;
                if (txtEstado.Text == "Activado")
                {
                    estado = 1;
                }
                else
                {
                    estado = 0;
                }
                upd.estado = estado;
                filas = con.actualizarCatalogo(upd);
                switch (filas)
                {
                    case 1:
                        MessageBox.Show("Catalogo actualizado");
                        clearData();
                        break;
                    case -2:
                        MessageBox.Show("Ya hay un Catalogo con este nombre");
                        break;
                    default:
                        MessageBox.Show("Catalogo no actialuzado");
                        break;
                }
            }
        }
        //Cargar datos al selecionar filas
        private void ListarCatalogos_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ListarCatalogos.SelectedItem != null)
            {
                string row = ((DataRowView)ListarCatalogos.SelectedItem).Row[0].ToString();
                BuscarcatalogoXID(row);
            }  
        }
        //Buscar catalogo por ID
        private void BuscarcatalogoXID (string idsearch)
        {
            int data = Int32.Parse(idsearch);
            DataTable dt = new DataTable();
            CADCatalogo con = new CADCatalogo();
            Catalogo c = new Catalogo();
            dt = con.OneCatalog(data);
            txtNombre.Text = dt.Rows[0][1].ToString();
            byte estado = Convert.ToByte(dt.Rows[0][3]);
            switch (estado)
            {
                case 1:
                    txtEstado.SelectedIndex = 0;
                    break;
                default:
                    txtEstado.SelectedIndex = 1;
                    break;
            }
            id = data;
        }
        //Eliminar catalogo
        private void eliminarCatalogo(object sender, RoutedEventArgs e)
        {
            int filas = 0;
            if (id != 0)
            {
                CADCatalogo con = new CADCatalogo();
                Catalogo del = new Catalogo();
                del.Id = id;
                filas = con.eliminarCatalogo(del);
                if (filas>0)
                {
                    MessageBox.Show("Catalogo eliminado");
                }
                else
                {
                    MessageBox.Show("Catalogo no eliminado");
                }
            }
        }
        //Volver
        private void back(object sender, RoutedEventArgs e)
        {
            PanelUsers back = new PanelUsers();
            App.Current.MainWindow = back;
            back.Show();
            this.Close();
        }
        public void clearData()
        {
            txtNombre.Text = null;
            txtEstado.SelectedIndex = 0;
        }
    }
}
